%%% This module creates the routing function used in ale_yaws_mod:
%%% route_uri(Method, Uri) -> {Controller, Action, Args} | no_route

-module(ale_routes_gen).

-compile(export_all).

gen() ->
    io:format("Collect routes...~n"),
    Forms = filelib:fold_files(".", "^c_.*\.beam$", true,
        fun(FileName, Acc) ->
            BaseName = filename:basename(FileName, ".beam"),
            io:format("  ~s...\n", [BaseName]),
            Controller = list_to_atom(BaseName),
            case parse(Controller) of
                undefined -> Acc;
                Form      -> [Form | Acc]
            end
        end,
        []
    ),

    Source = [
        "% This file is autogenerated by routes_gen. Do not edit because your edit will\n% be lost when this file is regenerated.\n"
        "-module(ale_routes).\n\n"

        "-export([route_uri/2, url_for/3]).\n\n"

        "route_uri(Method, Uri) -> Tokens = string:tokens(Uri, \"/\"), route_tokens(Method, Tokens).\n",
        gen_routes(Forms),
        "\nroute_tokens(_, _) -> no_route.\n",

        gen_url_fors(Forms),
        "\nurl_for(_, _, _) -> erlang:error(no_url).\n"
    ],
    file:write_file("ale_routes.erl", Source).

%-------------------------------------------------------------------------------

%% Returns {Controller, [{Method, [{fixed, Token} | {var, Token}], Action}]}
parse(Controller) ->
    code:ensure_loaded(Controller),
    case erlang:function_exported(Controller, routes, 0) of
        false -> undefined;

        true ->
            Routes = Controller:routes(),
            {Controller, parse(Routes, [])}
    end.

parse([], Acc) ->
    lists:reverse(Acc);
parse([Method, Uri, Action | Rest], Acc) ->
    Tokens = string:tokens(Uri, "/"),
    TypedTokens = lists:foldr(
        fun(Token, Acc2) ->
            FirstChar = hd(Token),
            case ($a =< FirstChar) andalso (FirstChar =< $z) of
                true  -> [{fixed, Token} | Acc2];
                false -> [{var,   Token} | Acc2]
            end
        end,
        [],
        Tokens
    ),
    parse(Rest, [{Method, TypedTokens, Action} | Acc]).

%-------------------------------------------------------------------------------

gen_routes(Forms) ->
    lists:foldl(
        fun({Controller, Routes}, Acc) ->
            [
                Acc, "\n",
                "% ", atom_to_list(Controller), "\n",
                lists:foldl(
                    fun({Method, TypedTokens, Action}, Acc2) ->
                        UriPattern = uri_pattern(TypedTokens, undefined),
                        Vars = vars(TypedTokens),
                        [
                            Acc2,
                            io_lib:format(
                                "route_tokens(~p, ~s) -> {~p, ~p, ~s};\n",
                                [Method, UriPattern, Controller, Action, Vars]
                            )
                        ]
                    end,
                    [],
                    Routes
                )
            ]
        end,
        [],
        Forms
    ).

gen_url_fors(Forms) ->
    lists:foldl(
        fun({Controller, Routes}, Acc) ->
            [
                Acc, "\n",
                "% ", atom_to_list(Controller), "\n",
                lists:foldl(
                    fun({_Method, TypedTokens, Action}, Acc2) ->
                        UriPattern = uri_pattern(TypedTokens, "\"/\""),
                        Vars = vars(TypedTokens),
                        [$c, $_ | ShortControllerS] = atom_to_list(Controller),
                        ShortController = list_to_atom(ShortControllerS),
                        [
                            Acc2,
                            io_lib:format(
                                "url_for(~p, ~p, ~s) -> ~s;\n",
                                [ShortController, Action, Vars, UriPattern]
                            )
                        ]
                    end,
                    [],
                    Routes
                )
            ]
        end,
        [],
        Forms
    ).

%-------------------------------------------------------------------------------

%% Returns a flat string like ["hello", Name] to be used as the URI pattern to be matched.
uri_pattern(TypedTokens, Prefix) ->
    Elems = lists:map(
        fun(TypedToken) ->
            case TypedToken of
                {fixed, Fixed} -> [$"] ++ Fixed ++ [$"];
                {var,   Var}   -> Var
            end
        end,
        TypedTokens
    ),
    case Prefix of
        undefined -> [$[] ++ string:join(Elems, ", ") ++ [$]];
        _         -> [$[] ++ string:join([Prefix | Elems], ", ") ++ [$]]
    end.

%% Returns a flat string like [Name] to be used as the extracted variable parts.
vars(TypedTokens) ->
    Vars = lists:foldr(
        fun(TypedToken, Acc) ->
            case TypedToken of
                {fixed, _}   -> Acc;
                {var,   Var} -> [Var | Acc]
            end
        end,
        [],
        TypedTokens
    ),
    [$[] ++ string:join(Vars, ", ") ++ [$]].
